package com.tanaye.www.service;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

/**
 * Service de configuration s√©curis√©
 * Valide les propri√©t√©s sensibles au d√©marrage
 */
@Slf4j
@Service
public class SecureConfigurationService {

    @Value("${jwt.secret}")
    private String jwtSecret;

    @Value("${spring.datasource.password}")
    private String databasePassword;

    @Value("${supabase.apiKey}")
    private String supabaseApiKey;

    /**
     * Valide la configuration de s√©curit√© au d√©marrage
     */
    public void validateSecurityConfiguration() {
        log.info("üîê Validation de la configuration de s√©curit√©...");

        validateJwtConfiguration();
        validateDatabaseConfiguration();
        validateSupabaseConfiguration();

        log.info("‚úÖ Configuration de s√©curit√© valid√©e");
    }

    private void validateJwtConfiguration() {
        if (jwtSecret == null || jwtSecret.length() < 32) {
            log.error("‚ùå JWT secret manquant ou trop faible (minimum 32 caract√®res)");
            throw new IllegalStateException("JWT secret invalide");
        }
        log.info("‚úÖ Configuration JWT valid√©e");
    }

    private void validateDatabaseConfiguration() {
        if (databasePassword == null || databasePassword.isEmpty()) {
            log.error("‚ùå Mot de passe de base de donn√©es manquant");
            throw new IllegalStateException("Configuration de base de donn√©es incompl√®te");
        }
        log.info("‚úÖ Configuration de base de donn√©es valid√©e");
    }

    private void validateSupabaseConfiguration() {
        if (supabaseApiKey == null || supabaseApiKey.isEmpty()) {
            log.error("‚ùå Cl√© API Supabase manquante");
            throw new IllegalStateException("Configuration Supabase incompl√®te");
        }
        log.info("‚úÖ Configuration Supabase valid√©e");
    }
}